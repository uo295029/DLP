CATEGORIES
type;
statement;
expression;
definition;

NODES
program -> definition*;

varDefinition:definition -> name:string type;
functionDefinition:definition -> name:string params:varDefinition* type v:varDefinition* s:statement*;
structDefinition:definition -> name:string attributes:attribute*;

attribute -> name:string type;

//Statements

assignment:statement -> left:expression right:expression;
functionCallS:statement -> name:string params:expression*;
return:statement -> expression?;
if:statement -> condition:expression yes:statement* no:statement*;
while:statement -> condition:expression yes:statement*;
for:statement -> varDefinition condition:expression increment:statement statement*;
print:statement -> expression*;
printsp:statement -> expression*;
println:statement -> expression*;
read:statement -> expression;

//Expressions

variable:expression -> name:string;
intLiteral:expression -> value:string;
floatLiteral:expression -> value:string;
charLiteral:expression -> value:string;
arithmetic:expression -> left:expression operator:string right:expression;
negate:expression -> expression;
logic:expression -> left:expression operator:string right:expression;
attributeAccess:expression -> left:expression right:string;
comparison:expression -> left:expression operator:string right:expression;
arrayAccess:expression -> left:expression right:expression;
cast:expression -> castType:type expression;
functionCallE:expression -> name:string params:expression*;

//Types

intType:type -> ;
floatType:type -> ;
charType:type -> ;
arrayType:type -> size:int type;
structType:type -> name:string;
voidType:type -> ;

// -----------------------
ATTRIBUTE GRAMMAR Identification

variable -> varDefinition;
functionCallE -> functionDefinition;
functionCallS -> functionDefinition;
structType -> structDefinition;

ATTRIBUTE GRAMMAR TypeChecking
expression -> type;
expression -> lvalue:boolean;
statement -> function:functionDefinition;

ATTRIBUTE GRAMMAR MemoryAllocation
varDefinition -> offset:int;
varDefinition -> scope:int;
attribute -> offset:int;
functionDefinition -> varsSize:int;
functionDefinition -> paramsSize:int;

CODE SPECIFICATION Mapl
run[program]
execute[statement]
value[expression]
address[expression]

metadata[program]
metadata[varDefinition]